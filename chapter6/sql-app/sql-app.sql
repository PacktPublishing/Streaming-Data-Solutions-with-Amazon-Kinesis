 /**
  * Use Case #1 :
  * ===================================================
  * Determine if station is running low on available bikes so that we can move bicycles around.
  * We will use live streaming data to get the COUNT of bikes OVER 5 MINUTE period
  * When "action" equals RENTED count is -1 and if action is DOCKED count is +1
  */
CREATE OR REPLACE STREAM RENTAL_COUNT (
	STATIONID        INTEGER,
    BIKECOUNT        INTEGER,
    ASOFTIME         TIMESTAMP
);

CREATE OR REPLACE PUMP RENTAL_COUNT_PUMP AS
	INSERT INTO RENTAL_COUNT
    SELECT STREAM
        "stationId",
        SUM(CASE "action"
            WHEN 'RENTED' THEN -1
            WHEN 'DOCKED' THEN 1
            ELSE 0
        END)  "bikeCount",
        ROWTIME AS asOfTime
FROM "SOURCE_SQL_STREAM_001"
GROUP BY "stationId",
         STEP("SOURCE_SQL_STREAM_001".ROWTIME BY INTERVAL '5' MINUTE);

/**
  * Use Case #2 :
  * ===================================================
  * Calculate revenue generated by rentals
  * We will use live streaming data to filter only rides that have completed into their own in-application stream
  * We are then create metrics over last 5 minutes
  *
  * When "action" equals RENTED count is -1 and if action is DOCKED count is +1
  */
CREATE OR REPLACE STREAM COMPLETED_BIKE_RIDES (
    STATION_ID           INTEGER,
    TRIP_DURATION        BIGINT,
    PRICE                DOUBLE
);

CREATE OR REPLACE STREAM CALCS_BY_STATION (
    STATION_ID           INTEGER,
    MIN_PRICE            DOUBLE,
    MAX_PRICE            DOUBLE,
    AVG_PRICE            DOUBLE,
    AMT_EARNED           DOUBLE,
    MIN_TRIP             DOUBLE,
    MAX_TRIP             DOUBLE,
    AVG_TRIP             DOUBLE,
    TOTAL_TRIPS          INTEGER
);

CREATE OR REPLACE PUMP COMPLETED_BIKE_RIDES_PUMP AS
    INSERT INTO COMPLETED_BIKE_RIDES
    SELECT STREAM
        "stationId",
        "tripDuration",
        "price"
    FROM source_sql_stream_001
    WHERE "action" LIKE 'DOCKED'
      AND ("tripDuration" > 0 AND "price" > 0) ;

CREATE OR REPLACE PUMP CALCS_BY_STATIONN_PUMP AS
    INSERT INTO CALCS_BY_STATION
    SELECT STREAM STATION_ID,
        CAST( MIN(PRICE) OVER WIN AS DECIMAL(4,2)) AS min_price,
        CAST( MAX(PRICE) OVER WIN AS DECIMAL(4,2)) AS max_price,
        CAST( AVG(PRICE) OVER WIN AS DECIMAL(4,2)) AS avg_price,
        CAST( SUM(PRICE) OVER WIN AS DECIMAL(4,2)) AS earnings,
        CAST( MIN(TRIP_DURATION) OVER WIN AS DECIMAL(4,2)) AS min_trip,
        CAST( MAX(TRIP_DURATION) OVER WIN AS DECIMAL(4,2)) AS max_trip,
        CAST( AVG(TRIP_DURATION) OVER WIN AS DECIMAL(4,2)) AS avg_trip,
        CAST( COUNT(STATION_ID) OVER WIN AS INTEGER) AS total_trips
    FROM COMPLETED_BIKE_RIDES
    WINDOW WIN AS (
        PARTITION BY STATION_ID
        RANGE INTERVAL '1' MINUTE PRECEDING);

/**
 * Staggere Count
 */
REATE OR REPLACE STREAM RENTAL_COUNT_STAGGER (
	STATIONID        INTEGER,
    BIKECOUNT        INTEGER,
    ASOFTIME         TIMESTAMP
);

CREATE OR REPLACE PUMP RENTAL_COUNT_STAGGER_PUMP AS
	INSERT INTO RENTAL_COUNT_STAGGER
    SELECT STREAM
        "stationId",
        SUM(CASE "action"
            WHEN 'RENTED' THEN -1
            WHEN 'DOCKED' THEN 1
            ELSE 0
        END)  "bikeCount",
        FLOOR("eventUTCTime" TO MINUTE) AS asOfTime
FROM "SOURCE_SQL_STREAM_001"
WINDOWED BY STAGGER (
   PARTITION BY FLOOR("eventUTCTime" TO MINUTE),
   "stationId" RANGE INTERVAL '1' MINUTE
);
